#%praxis.version 4.1.0
@ ./edgeDetection video:gl:p2d {
  #%graph.x 0
  #%graph.y 0
  .code "

     @P(1) @Type.Number(min = 10,max = 4000, def = 1280) double resolutionX;
     @P(2) @Type.Number(min = 10,max = 4000, def = 720) double resolutionY;

    
    void updateUniforms() \{
        shader.set(\"resolutionX\", resolutionX);
        shader.set(\"resolutionY\", resolutionY);
    \}

    
    // BOILERPLATE BELOW
    @In(0)
    PImage in;
    @P(0)
    @Type.String(mime = GLSL_FRAGMENT_MIME, template = DEFAULT_FRAGMENT_SHADER)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;

    @Override
    public void setup() \{
        updateShader();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER,
                    fragment.isEmpty() ? DEFAULT_FRAGMENT_SHADER : fragment);
        \}
        shader(shader);
        updateUniforms();
        image(in, 0, 0);
        resetShader();
    \}

    void updateShader() \{
        shader = null;
    \}

"
  .fragment "uniform sampler2D texture;

uniform vec2 texOffset;
uniform float resolutionX;
uniform float resolutionY;

varying vec4 vertColor;
varying vec4 vertTexCoord;

// Basic sobel filter implementation
// Jeroen Baert - jeroen.baert@cs.kuleuven.be
// 
// www.forceflow.be
// https://www.shadertoy.com/view/Xdf3Rf


float intensity(in vec4 color)\{
	return sqrt((color.x*color.x)+(color.y*color.y)+(color.z*color.z));
\}

void main() \{
    float stepx = 1.0/resolutionX;
    float stepy = 1.0/resolutionY;

    vec2 center = vec2(vertTexCoord.st);

    float tleft = intensity(texture2D(texture,center + vec2(-stepx,stepy)));
    float left = intensity(texture2D(texture,center + vec2(-stepx,0)));
    float bleft = intensity(texture2D(texture,center + vec2(-stepx,-stepy)));
    float top = intensity(texture2D(texture,center + vec2(0,stepy)));
    float bottom = intensity(texture2D(texture,center + vec2(0,-stepy)));
    float tright = intensity(texture2D(texture,center + vec2(stepx,stepy)));
    float right = intensity(texture2D(texture,center + vec2(stepx,0)));
    float bright = intensity(texture2D(texture,center + vec2(stepx,-stepy)));

    float x = tleft + 2.0*left + bleft - tright - 2.0*right - bright;
    float y = -tleft - 2.0*top - tright + bleft + 2.0 * bottom + bright;

    float color = sqrt((x*x) + (y*y));

    gl_FragColor = vec4(vec3(color),1);
\}

"
  .resolution-x 1920
  .resolution-y 1080
}
