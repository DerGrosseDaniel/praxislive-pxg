#%praxis.version 4.1.0
@ ./color video:gl:p2d {
  #%graph.x 0
  #%graph.y 0
  #%graph.minimized true
  .code "

     @P(1) @Type.Number(min = 0, max = 1, def= 0) double r;
     @P(2) @Type.Number(min = 0, max = 1, def= 0.7) double g;
     @P(3) @Type.Number(min = 0, max = 1, def= 0.5) double b;
     
     @P(4) @Type.Boolean(def = false) boolean useHsvNotRgb;
     
     @P(5) @Type.Number(min = 0, max = 1, def= 0) double h;
     @P(6) @Type.Number(min = 0, max = 1, def= 0) double s;
     @P(7) @Type.Number(min = 0, max = 1, def= 0) double v;
    
    void updateUniforms() \{
         shader.set(\"r\", r);
         shader.set(\"g\", g);
         shader.set(\"b\", b);
         shader.set(\"h\", h);
         shader.set(\"s\", s);
         shader.set(\"v\", v);
         shader.set(\"hsv\", useHsvNotRgb);
         
    \}

    
    // BOILERPLATE BELOW
    @In(0)
    PImage unused;
    @P(0)
    @Type.String(mime = GLSL_FRAGMENT_MIME, template = DEFAULT_FRAGMENT_SHADER)
    @OnChange(\"updateShader\")
    @Config.Port(false)
    String fragment;

    PShader shader;
    

    @Override
    public void setup() \{
        updateShader();
    \}

    @Override
    public void draw() \{
        if (shader == null) \{
            shader = createShader(DEFAULT_VERTEX_SHADER,
                    fragment.isEmpty() ? DEFAULT_FRAGMENT_SHADER : fragment);
        \}
        shader(shader);
        updateUniforms();
        image(unused, 0, 0);
        resetShader();
    \}

    void updateShader() \{
        shader = null;
    \}

"
  .fragment "uniform sampler2D texture;

uniform vec2 texOffset;

uniform float r;
uniform float g;
uniform float b;
uniform float h;
uniform float s;
uniform float v;

uniform bool hsv;

varying vec4 vertColor;
varying vec4 vertTexCoord;


vec3 hsv2rgb(vec3 c);


void main() \{
  if(hsv == true) \{
    gl_FragColor = vec4(hsv2rgb(vec3(h,s,v)),1.0);
    
  \} else \{
    gl_FragColor = vec4(r,g,b,1.0);
  \}
\}



vec3 hsv2rgb(vec3 c) \{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
\}"
  .r 0.06140350877192982
  .g 0.5701754385964912
  .b 0.5263157894736842
  .use-hsv-not-rgb true
  .h 0.8333333333333334
  .s 1.0
  .v 0.3991228070175439
}
